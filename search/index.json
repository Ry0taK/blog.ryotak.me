[{"content":"はじめに TwitterはBug Bountyプログラム(脆弱性報奨金制度とも呼ばれる)を実施しており、脆弱性診断を行うことが認められています。\n本記事は、そのプログラムを通して報告された脆弱性についてを解説したものであり、インターネット上のサービスに無差別に攻撃する事を推奨するものではありません。\nまた、Twitter上で脆弱性を発見した場合は無闇に公開せず、TwitterのBug Bountyプログラムより報告してください。\n要約 不適切なアクセス制御とレートリミットの欠如、タイミング攻撃を組み合わせることによりTwitterの非公開リストの中身を閲覧できた。\n不適切なアクセス制御 TwitterのGraphQLエンドポイントに対して以下のようなリクエストを送信すると、リストが非公開であったとしてもリストのメンバーリストを取得することが出来た。\nGET /graphql/iUmNRKLdkKVH4WyBNw9x2A/ListMembers?variables=%7B%22listId%22%3A%22[ここにリストID]%22%2C%22count%22%3A20%2C%22withTweetResult%22%3Afalse%2C%22withUserResult%22%3Afalse%7D HTTP/1.1 Host: api.twitter.com User-Agent: [Redacted] Accept: */* Accept-Language: ja,en-US;q=0.7,en;q=0.3 Accept-Encoding: gzip, deflate content-type: application/json x-twitter-auth-type: OAuth2Session x-twitter-client-language: ja x-twitter-active-user: yes x-csrf-token: [Redacted] Origin: https://twitter.com authorization: Bearer [Redacted] Connection: close Cookie: [Redacted]  リストのIDが取得できれば非公開リストの内容が読み取れる状態だったので報告したが、Twitter曰く非公開リストのIDを取得するのは困難らしく、それを回避しない限り潜在的な脆弱性でしか無いと拒否されそうになった。1\nしかしながら、TwitterのIDはミリ秒単位のタイムスタンプ、Worker ID、データセンターID、ID衝突回避用の値で構成されており、そのうちID衝突回避用の値は0始まりで衝突するたびに加算されていく物で、かつデータセンターIDは基本的に10であるため、ミリ秒単位のタイムスタンプとWorker IDを推測することができれば実質的にIDがわかる。\n攻撃は現実的であるということを証明する必要があったため、更に調査することにした。\nレートリミットの欠如 非公開リストのIDを取得する方法を探していた際に、Twitter APIの一部のレートリミットが、ドキュメント上には存在すると書いてあるにも関わらず、実際には存在しないことがわかった。\nそれらのエンドポイントの一つにPOST /1.1/lists/destroy.jsonが存在した。\nこのエンドポイントは、リストを削除するためのエンドポイントなのだが、当然他人の非公開リストを削除しようとしたとしても404が帰ってくるだけだった。\nPOST /1.1/lists/destroy.json Content-Type: application/x-www-form-urlencoded Authorization: OAuth [Redacted] list_id=[ここにリストID]  タイミング攻撃 前述のエンドポイントを詳しく調べている際に、TwitterのAPIにリクエストを送った際に帰ってくるレスポンスのほぼ全てにx-response-timeというヘッダが存在していることがわかった。\n確認した所、このヘッダはTwitter API内部で処理にかかった時間を正確に返しているようだった。\nここまで露骨な前振りをされたらタイミング攻撃しか無いだろうということで試してみた所、他人の非公開リストの削除を試みた場合と存在しないリストの削除を試みた場合とでx-response-timeの値に～20程の差異が存在した。\nこれと前述のレートリミットの欠如を組み合わせることにより、非公開リストのIDを現実的な時間内で総当りすることが可能となり、それを報告した所無事にTwitterのセキュリティチームによりトリアージされた。\nまとめ Twitterのトリアージチームがこの脆弱性を調査している間、非公開リストのメンバーリストを取得できるのは「Bug Bountyプログラムで扱うほどのリスクではない」という返信が帰ってくるなど、拒否されそうになる場面が何度かあったが、根気良く説明した事により脆弱性として認められた。\n一度拒否することが確定した物2でも、セキュリティ上の問題が明確なものに関してはなぜ問題なのかを説明することが重要で、それによって一転して脆弱性であると認めることがあるため、今後Twitterに脆弱性を報告する人はその点を留意したほうが良いかもしれない。\nタイムライン    日付 出来事     2020/5/29 脆弱性を報告   2020/5/30 Twitter: 更に情報が必要   2020/5/30 追加の情報を送信   2020/6/1 Twitter: 更に情報が必要   2020/6/2 追加の情報を送信   2020/6/2 Twitter: 内部調査中   2020/6/6 Twitter: 脆弱性として認定   2020/6/24 Twitter: 報奨金額の決定   2020/8/1 Twitter: 脆弱性を修正   2020/8/4 脆弱性の開示      後のレポートでIDを取得することは容易であるとTwitterチームが認めたが、直近のレポートでもトリアージチームはIDを取得する方法が無いという理由で拒否しようとしてくる。 \u0026#x21a9;\u0026#xfe0e;\n 例として、限定公開のコンテンツのURLが推測出来るということを報告したらそれは脆弱性ではなく仕様であるとされたことや、非公開ツイートの一部データが取得できる事を報告したらそれはBug Bountyプログラムで扱うほどのリスクではないとされたこと等がある。 \u0026#x21a9;\u0026#xfe0e;\n   ","date":"2020-10-09","permalink":"https://blog.ryotak.me/post/twitter-list-chain/","tags":null,"title":"Twitterの非公開リストが見れた話"},{"content":"はじめに TwitterはBug Bountyプログラム(脆弱性報奨金制度とも呼ばれる)を実施しており、脆弱性の診断行為を行うことが認められています。\n本記事は、そのプログラムを通して報告された脆弱性についてを解説したものであり、Twitterが認知していない未修正の脆弱性を公開する事を意図したものではありません。\nまた、Twitter上で脆弱性を発見した場合はTwitterのBug Bountyプログラムより報告してください。\n(This article is written in Japanese. If you\u0026rsquo;d like to read this article in English, please visit HackerOne report.)\nTL;DR Twitterが公開したフリート機能が使用しているAPIに脆弱性が存在し、READ権限しか持っていないサードパーティアプリケーションがフリートの作成や削除などを行えた。\n調査したきっかけ Twitterは2020年11月10日に、フリートと呼ばれる機能を日本に対して公開した。\n当初はiOS版のクライアントのみに実装されたが、翌日の11日には手元のAndroid端末にフリート機能用の更新が降ってきていたため、APIを解析してみることにした。\n解析 Twitter for Androidは通常のAndroidアプリと同じくJavaで書かれており、難読化はされているものの解析はそこまで難しくない。\nそのため、apktoolとdex2jar、CFRを用いてデコンパイルし、ある程度可読性が高い状態に戻した。(詳細なデコンパイル方法に関してはここでは触れないが、ググれば出てくるのでそちらを参照してほしい。)\nエンドポイント名がわからなければAPIを解析できないため、grepを用いてfleetという文字列が含まれる.javaファイルを検索し、/fleet/v1/user_fleetsという文字列が含まれるファイルを発見した。\nそのファイルと同じ階層にあるファイルを調べた所、他のエンドポイントと思わしき文字列が見つかったため、一旦それらを解析し、Gistにまとめた。\n検証中に\u0026hellip; その後、Gistの内容を精査している際に、サードパーティのアプリケーションとして認証している際にフリート関連のAPIを叩くと、問題なく動作することがわかった。\nこの事をドキュメントにまとめて公開すれば非公式クライアントの製作者の方が喜ぶのでは？と思い詳細なAPIドキュメントを書いた。\n公開する前にこのGistの内容が間違っていないか検証していた所、POST /fleets/v1/createに対して読み取り権限しか持たないアプリケーションとしてリクエストを送信した際に、フリートが作成されてしまっていることがわかった。\nこれは脆弱性なのか？ 最初は検証用アプリケーションに誤って書き込み権限を与えてしまったのだと思い、権限を確認したが、明らかに読み取り権限しか与えられていなかった。\nこの時点で、これは脆弱性なのでは？と思い始めたが、確証が得られなかったのでもう少し深く調査することにした。\nその結果、通常のTwitterのAPI(POST /1.1/statuses/update.json等)では、APIの処理が走る前に権限チェックをしていたが(当たり前だが)、どうやらフリート関連のエンドポイントは通常のAPIでは行われる権限チェックが行われていないことが判明した。\n$ twurl /1.1/statuses/update.json --header 'Content-Type: application/json' -d '{\u0026quot;status\u0026quot;:\u0026quot;Test\u0026quot;}' {\u0026quot;request\u0026quot;:\u0026quot;\\/1.1\\/statuses\\/update.json\u0026quot;,\u0026quot;error\u0026quot;:\u0026quot;Read-only application cannot POST.\u0026quot;} $ twurl /fleets/v1/create -X POST --header 'Content-Type: application/json' -d '{\u0026quot;text\u0026quot;:\u0026quot;Hey yo\u0026quot;}' {\u0026quot;fleet\u0026quot;:{\u0026quot;created_at\u0026quot;:\u0026quot;2020-11-12T12:29:16.180000000Z\u0026quot;,\u0026quot;deleted_at\u0026quot;:null,\u0026quot;expiration\u0026quot;:\u0026quot;2020-11-13T12:29:16.189235445Z\u0026quot;,\u0026quot;fleet_id\u0026quot;:\u0026quot;F1-328253875041691174\u0026quot;,\u0026quot;fleet_thread_id\u0026quot;:\u0026quot;T1-328253875041625638\u0026quot;,\u0026quot;mentions\u0026quot;:null,\u0026quot;mentions_str\u0026quot;:null,\u0026quot;read\u0026quot;:false,\u0026quot;text\u0026quot;:\u0026quot;Hey yo\u0026quot;,\u0026quot;user_id\u0026quot;:1195137762027962368},\u0026quot;fleet_thread_id\u0026quot;:\u0026quot;T1-328253875041625638\u0026quot;,\u0026quot;fleet_id\u0026quot;:\u0026quot;F1-328253875041691174\u0026quot;,\u0026quot;users\u0026quot;:null}  報告 脆弱性であることがわかったため、一旦フリート関連のAPIドキュメントの公開を見送り、Twitterに報告することにした。\n報告は11月12日に行ったのだが、11月18日(実際にはもう数日前だったのだと思う)には修正されており、非常に印象的な修正速度だった。\nしかしながら、残念なことにフリート関連のAPIがサードパーティのアプリケーションによって使用できていた事自体が問題だったようで、フリート関連のAPIをサードパーティのアプリケーションに叩かせないように変更することで修正されてしまった。\nその後 Twitterが脆弱性を修正した3日後、同じくフリートのAPIを解析してフリートの画像が24時間経った後もCDNから削除されない事をツイートしている人がおり、フリート機能の実装に使えた期間はとても短かったのかな、と少しTwitter内部の開発者がかわいそうになってしまった。\ni have also just confirmed that the media URLs don\u0026#39;t expire after 24h, so you can view fleets after they\u0026#39;re deleted\n\u0026mdash; 波兰蠢驴 (@donk_enby) November 21, 2020  この脆弱性を発見する理由となったGistに関しては、ここで公開しているので何かの役にたててほしい。\nまとめ この一連の流れで、新機能を解析することの重要さと、どんな大企業でもミスはするという教訓を得ることが出来た。\nTwitterに報告した際の実際のレポートはここから見れるので是非読んでみてほしい。\nこのブログ記事に関して、なにか質問等がある場合はTwitter @ryotkakへDMを飛ばしてください。\nタイムライン    日付 出来事     2020/11/10 Twitterがフリート機能を日本向けにリリース   2020/11/11 手元の環境でフリート機能が使えるようになった   2020/11/12 脆弱性を発見、報告   2020/11/13 Twitter: 現在確認中   2020/11/14 Twitter: 脆弱性として認定   2020/11/18 Twitter: 脆弱性を修正   2020/12/15 Twitter: 報奨金額の決定   2021/01/05 脆弱性の開示    ","date":"2020-01-05","permalink":"https://blog.ryotak.me/post/twitter-privesc/","tags":null,"title":"Twitterのフリート機能に対する権限昇格"}]